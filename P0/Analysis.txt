
** Task0.py **
This takes runs in __O(1)__, due to the fact that _access_ on a Python array has O(1), and there are
two lines executing accesses to lists

** Task1.py **
This takes runs in __O(n)__, due to the fact that we access sequentially both files for two of their
columns, resulting in `2*2*O(n) -> O(n)`

** Task2.py **
Time Complexity: O(n)
Description: List is looped through once


** Task3.py **
Time Complexity: O(n+nlogn)
Description: For loop and python sort


** Task4.py **
This takes runs in __O(n log n)__, due to the fact that we find list sorting operations, which have
a time complexity of __O(n log n)__. In the code we find many operations that are __O(1)__ as
the different elements are modified. Additionally there are several _full scans thorough the lists_,
which have __O(n)__ time complexity. Though they all add up to some value of `x * O(n) + `O(n log n)`,
we end up simplifying them into `O(n log n)`.
